 const malloy = require("@malloydata/malloy")
 const bigquery = require("@malloydata/db-bigquery")
 const dataGen = require("./query_config.js")

 const categories = ["Generate Random Articles"]
 const connection = new bigquery.BigQueryConnection("bigquery",{},{serviceAccountKeyPath:"sa_key.json"})
 const runtime = new malloy.SingleConnectionRuntime(connection)
 const model = runtime.loadModel(`
            sql: news is ||
                SELECT *, split(order_sequence, '_')[offset(0)] as parent
                FROM ${process.env.FULLY_QUALIFIED_TABLENAME};;

            source: news2 is from_sql(news)
 `)
 
 /**
  * Google Cloud Function that responds to messages sent in
  * Google Chat.
  *
  * @param {Object} req Request sent from Google Chat.
  * @param {Object} res Response to send back.
  */
 exports.helloChat = async function helloChat(req, res) {
    if (req.method === 'GET' || !req.body.message) {
        res.send('Hello! This function must be called from Google Chat.');
    }
    
    const sender = req.body.message.sender.displayName;
    const image = req.body.message.sender.avatarUrl;
    
    var message;

    if (req.body.type == "ADDED_TO_SPACE" || req.body.type == "MESSAGE") {
        // Start a new vote when this app is added or mentioned.
        message = createMessage(sender, image, undefined, categories);
    }

    if (req.body.type == "CARD_CLICKED") {
        // Update the card in place when the "UPVOTE" button is clicked.
        if (req.body.action.actionMethodName == "update") {
        var category = req.body.action.parameters[0].value;
        const malloyData = await random(category);
        message = createMessage(sender, image, malloyData,[], category, true);
        }
    }
 
   res.send(message);
 };

 // generate category buttons for gchat display

 /**
  * 
  * @param {Array} categories 
  * @returns 
  */
 const generateCategoryUI = (categories) => {
    return {
        'buttons': categories.map((c) => {
            return {
                "textButton": {
                    "text": c.toUpperCase(),
                    "onClick": {
                    "action": {
                        "actionMethodName": "update",
                        "parameters": [{
                            "key": "category",
                            "value": c
                        }]
                    }}
                }
            }
        })
    }
}

// generate header for gchat display
/**
 * 
 * @param {string} displayName 
 * @returns {Object}
 */
const generateHeader = (displayName) => {
    return {
        'header': {
            'title': 'Hello ' + displayName + "!",
            'subtitle': "I'm a bot that fetches Random Hacker News Articles with Malloy!"
        }
    }
}

/**
 * 
 * @param {Array} queryData 
 * @param {Array} categories 
 * @param {String} category 
 * @param {Boolean} update 
 * @returns 
 */
const generateSections = (queryData, categories, category, update) => {
    if(!update) {
        return {
            'sections': [{
                'widgets': [
                    generateCategoryUI(categories)
                ]
            }]
        }
    } else {
        return {
            'sections': [{
                'widgets': [
                    generateSelectedCategory(category),
                    generateNewsArticleDisplay(queryData),
                    generateNewsArticleCommentsDisplay(queryData)
                ]
            }]
        }
    }
}

/**
 * 
 * @param {string} category 
 * @returns {Object}
 */
const generateSelectedCategory = (category) => {
    return {
        "keyValue": {
            "topLabel": "Randomly Selected Article",
            "content": "Generated by Malloy"
        }
    }
}

/**
 * 
 * @param {Array} queryData 
 * @returns 
 */
const generateNewsArticleDisplay = (queryData) => {
    return {
        'textParagraph': {
            'text': `<b>${queryData.parent_details[0].title}</b> <br>${queryData.parent_details[0].text}`
        }
    }
}

/**
 * 
 * @param {Array} queryData 
 * @returns 
 */
const generateNewsArticleCommentsDisplay = (queryData) => {
    return {
        'textParagraph': {
            'text': `<b>Total Article Comments: </b><b>${queryData.comments.total_comments == null ? '0' : queryData.comments.total_comments.toString()}</b>`
        }
    }
}
 
 /**
  * 
  * @param {String} displayName 
  * @param {String} imageURL 
  * @param {Array} queryData 
  * @param {Array} categories 
  * @param {String} category 
  * @param {Boolean} update 
  * @returns 
  */
 function createMessage(displayName, imageURL, queryData, categories=[], category='', update=false) {
   return {
    "actionResponse": { "type": update ? "UPDATE_MESSAGE" : "NEW_MESSAGE" },
     'cards': [{
       'name': 'Avatar Card',
       ...generateHeader(displayName),
       ...generateSections(queryData, categories, category, update)
     }],
   };
 }
 
 const generateRandomNumber = (length) => {
     return Math.floor(Math.random() * length)
 }
 
 const random = async (category) => {
    const malloyData = new dataGen.GenMalloyQuery()

    // grab total articles and pick random index
    const { queryOne } = malloyData.generateArticles()
    const articlesRunner = model.loadQuery(queryOne.articles)
    const articlesResults = await articlesRunner.run()
    const parentData = articlesResults.data.value
    const { parent } = parentData[generateRandomNumber(parentData.length)]

    const { queryTwo } = malloyData.generateArticle(parent)
    const articleRunner = model.loadQuery(queryTwo.article)
    const article = await articleRunner.run()
    console.log(article.data.value[0])
    return article.data.value[0]
 }